name: graphql-ppx-pipeline

on: [pull_request, push]

jobs:
  test_and_build:
    name: ${{ matrix.os }}/node-${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [18.x]
        os: [ubuntu-22.04, macOS-14]
        arch: [x64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Use OCaml
        uses: avsm/setup-ocaml@v2
        with:
          ocaml-compiler: 4.13.1

      - run: opam install . --deps-only
      - run: opam exec -- dune build --verbose; ls -l _build/install/default/bin

      # - name: snapshot tests
      #   env:
      #     GRAPHQL_CI: true
      #   run: |
      #     npm ci --omit=optional --ignore-scripts
      #     esy test
      #     esy release-static

      - name: (only on release) Upload artifacts ${{ matrix.os }}-${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: _build/default/src/bin/bin.exe

  # test_and_build:
  #   name: ${{ matrix.os }}/node-${{ matrix.node-version }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       node-version: [18.x]
  #       os: [windows-latest, macOS-13, macOS-latest]

  #   steps:
  #     - uses: actions/checkout@v1

  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}

  #     - name: Install esy
  #       run: |
  #         npm install -g esy@0.6.12

  #     - name: Install
  #       run: esy install

  #     - name: Print esy cache
  #       id: print_esy_cache
  #       run: node .github/workflows/print_esy_cache.js

  #     - name: Try to restore dependencies cache
  #       id: deps-cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ steps.print_esy_cache.outputs.esy_cache }}
  #         key: ${{ matrix.os }}-${{ hashFiles('**/index.json') }}

  #     - name: build
  #       run: esy b

  #     - name: test-native
  #       run: |
  #         esy b dune runtest -f
  #       env:
  #         CI: true

  #     - name: npm ci
  #       if: runner.os != 'Windows'
  #       run: |
  #         npm ci --no-optional
  #       env:
  #         GRAPHQL_CI: true

  #     - name: snaphot tests
  #       if: runner.os != 'Windows'
  #       run: |
  #         esy test

  #     - name: (only on release) Upload artifacts ${{ matrix.os }}
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: ${{ matrix.os }}
  #         path: _build/default/src/bin/bin.exe

  publish:
    needs: [test_and_build]
    name: (only on release) Publish
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"

      - name: Download linux artifacts (arm64)
        if: success()
        uses: actions/download-artifact@master
        with:
          name: ubuntu-22.04-arm64
          path: binaries/linux-22.04-arm64

      - name: Download linux artifacts (x64)
        if: success()
        uses: actions/download-artifact@master
        with:
          name: ubuntu-22.04-x64
          path: binaries/linux-22.04-x64

      - name: Download macOS artifacts (arm64)
        if: success()
        uses: actions/download-artifact@master
        with:
          name: macOS-14-arm64
          path: binaries/darwin-arm64

      - name: Download macOS artifacts (x64)
        if: success()
        uses: actions/download-artifact@master
        with:
          name: macOS-14-x64
          path: binaries/darwin-x64

      # - name: Download windows artifacts
      #   if: success()
      #   uses: actions/download-artifact@master
      #   with:
      #     name: windows-latest
      #     path: binaries/windows

      - name: Move artifacts
        if: success()
        run: |
          mkdir -p bin
          mv binaries/darwin-x64/bin.exe bin/graphql-ppx-darwin-x64.exe
          mv binaries/darwin-arm64/bin.exe bin/graphql-ppx-darwin-arm64.exe
          # mv binaries/windows/bin.exe bin/graphql-ppx-win-x64.exe
          mv binaries/linux-x64/bin.exe bin/graphql-ppx-linux-x64.exe
          mv binaries/linux-arm64/bin.exe bin/graphql-ppx-linux-arm64.exe

      - name: Publish
        if: success() && github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN_JAAP }}

      - name: Publish Prerelease
        if: success() && github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/')
        run: |
          npm version prerelease -preid $(git rev-parse --short HEAD) -no-git-tag-version
          npm publish --tag=dev
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN_JAAP }}
